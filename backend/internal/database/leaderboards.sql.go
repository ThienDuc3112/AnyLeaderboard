// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leaderboards.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLeaderboard = `-- name: CreateLeaderboard :one
INSERT INTO leaderboards(
        name,
        description,
        cover_image_url,
        allow_annonymous,
        require_verification,
        creator
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, created_at, updated_at, cover_image_url, allow_annonymous, require_verification, creator
`

type CreateLeaderboardParams struct {
	Name                string
	Description         string
	CoverImageUrl       pgtype.Text
	AllowAnnonymous     bool
	RequireVerification bool
	Creator             int32
}

func (q *Queries) CreateLeaderboard(ctx context.Context, arg CreateLeaderboardParams) (Leaderboard, error) {
	row := q.db.QueryRow(ctx, createLeaderboard,
		arg.Name,
		arg.Description,
		arg.CoverImageUrl,
		arg.AllowAnnonymous,
		arg.RequireVerification,
		arg.Creator,
	)
	var i Leaderboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImageUrl,
		&i.AllowAnnonymous,
		&i.RequireVerification,
		&i.Creator,
	)
	return i, err
}

const getLeaderboardById = `-- name: GetLeaderboardById :one
SELECT id, name, description, created_at, updated_at, cover_image_url, allow_annonymous, require_verification, creator
FROM leaderboards
WHERE id = $1
`

func (q *Queries) GetLeaderboardById(ctx context.Context, id int32) (Leaderboard, error) {
	row := q.db.QueryRow(ctx, getLeaderboardById, id)
	var i Leaderboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverImageUrl,
		&i.AllowAnnonymous,
		&i.RequireVerification,
		&i.Creator,
	)
	return i, err
}

const getRecentLeaderboards = `-- name: GetRecentLeaderboards :many
SELECT l.id,
    l.name,
    l.description,
    l.cover_image_url,
    l.created_at,
    COUNT(le.id) AS entries_count
FROM leaderboards l
    LEFT JOIN leaderboard_entries le ON l.id = le.leaderboard_id
WHERE l.created_at < $1
GROUP BY l.id,
    l.name,
    l.description,
    l.cover_image_url,
    l.created_at
ORDER BY l.created_at DESC
LIMIT $2
`

type GetRecentLeaderboardsParams struct {
	CreatedAt pgtype.Timestamptz
	Limit     int32
}

type GetRecentLeaderboardsRow struct {
	ID            int32
	Name          string
	Description   string
	CoverImageUrl pgtype.Text
	CreatedAt     pgtype.Timestamptz
	EntriesCount  int64
}

func (q *Queries) GetRecentLeaderboards(ctx context.Context, arg GetRecentLeaderboardsParams) ([]GetRecentLeaderboardsRow, error) {
	rows, err := q.db.Query(ctx, getRecentLeaderboards, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRecentLeaderboardsRow
	for rows.Next() {
		var i GetRecentLeaderboardsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CoverImageUrl,
			&i.CreatedAt,
			&i.EntriesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
