// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateLeadeboardFields implements pgx.CopyFromSource.
type iteratorForCreateLeadeboardFields struct {
	rows                 []CreateLeadeboardFieldsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateLeadeboardFields) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateLeadeboardFields) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Lid,
		r.rows[0].FieldName,
		r.rows[0].FieldValue,
		r.rows[0].FieldOrder,
		r.rows[0].ForRank,
		r.rows[0].Required,
		r.rows[0].Hidden,
	}, nil
}

func (r iteratorForCreateLeadeboardFields) Err() error {
	return nil
}

func (q *Queries) CreateLeadeboardFields(ctx context.Context, arg []CreateLeadeboardFieldsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"leaderboard_fields"}, []string{"lid", "field_name", "field_value", "field_order", "for_rank", "required", "hidden"}, &iteratorForCreateLeadeboardFields{rows: arg})
}

// iteratorForCreateLeadeboardOptions implements pgx.CopyFromSource.
type iteratorForCreateLeadeboardOptions struct {
	rows                 []CreateLeadeboardOptionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateLeadeboardOptions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateLeadeboardOptions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Lid,
		r.rows[0].FieldName,
		r.rows[0].Option,
	}, nil
}

func (r iteratorForCreateLeadeboardOptions) Err() error {
	return nil
}

func (q *Queries) CreateLeadeboardOptions(ctx context.Context, arg []CreateLeadeboardOptionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"leaderboard_options"}, []string{"lid", "field_name", "option"}, &iteratorForCreateLeadeboardOptions{rows: arg})
}

// iteratorForCreateLeaderboardExternalLink implements pgx.CopyFromSource.
type iteratorForCreateLeaderboardExternalLink struct {
	rows                 []CreateLeaderboardExternalLinkParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateLeaderboardExternalLink) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateLeaderboardExternalLink) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].LeaderboardID,
		r.rows[0].DisplayValue,
		r.rows[0].Url,
	}, nil
}

func (r iteratorForCreateLeaderboardExternalLink) Err() error {
	return nil
}

func (q *Queries) CreateLeaderboardExternalLink(ctx context.Context, arg []CreateLeaderboardExternalLinkParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"leaderboard_external_links"}, []string{"leaderboard_id", "display_value", "url"}, &iteratorForCreateLeaderboardExternalLink{rows: arg})
}
