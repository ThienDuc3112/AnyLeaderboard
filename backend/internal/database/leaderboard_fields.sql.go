// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leaderboard_fields.sql

package database

import (
	"context"
)

const bulkInsertFields = `-- name: BulkInsertFields :many
INSERT INTO leaderboard_fields (
        lid,
        field_name,
        field_value,
        field_order,
        for_rank,
        required,
        hidden
    )
SELECT 
        unnest($1::int[]), 
        unnest($2::text[]),
        unnest($3::text[])::field_type,  -- cast textâ†’enum here
        unnest($4::int[]),
        unnest($5::boolean[]), 
        unnest($6::boolean[]),
        unnest($7::boolean[])
RETURNING id
`

type BulkInsertFieldsParams struct {
	Lids        []int32
	FieldNames  []string
	FieldValues []string
	FieldOrders []int32
	ForRanks    []bool
	Required    []bool
	Hidden      []bool
}

func (q *Queries) BulkInsertFields(ctx context.Context, arg BulkInsertFieldsParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, bulkInsertFields,
		arg.Lids,
		arg.FieldNames,
		arg.FieldValues,
		arg.FieldOrders,
		arg.ForRanks,
		arg.Required,
		arg.Hidden,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bulkUpdateFields = `-- name: BulkUpdateFields :exec
UPDATE leaderboard_fields lf
SET 
  field_name = data.field_name,
  field_order = data.field_order,
  required = data.required,
  hidden = data.hidden
FROM jsonb_to_recordset($1::jsonb)
  AS data(
    id INT,
    field_name VARCHAR(32),
    field_order INTEGER,
    hidden BOOLEAN,
    required BOOLEAN
  )
WHERE lf.id = data.id
`

func (q *Queries) BulkUpdateFields(ctx context.Context, dollar_1 []byte) error {
	_, err := q.db.Exec(ctx, bulkUpdateFields, dollar_1)
	return err
}

const createLeadeboardField = `-- name: CreateLeadeboardField :one
INSERT INTO leaderboard_fields (
        lid,
        field_name,
        field_value,
        field_order,
        for_rank,
        required,
        hidden
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateLeadeboardFieldParams struct {
	Lid        int32
	FieldName  string
	FieldValue FieldType
	FieldOrder int32
	ForRank    bool
	Required   bool
	Hidden     bool
}

func (q *Queries) CreateLeadeboardField(ctx context.Context, arg CreateLeadeboardFieldParams) (int32, error) {
	row := q.db.QueryRow(ctx, createLeadeboardField,
		arg.Lid,
		arg.FieldName,
		arg.FieldValue,
		arg.FieldOrder,
		arg.ForRank,
		arg.Required,
		arg.Hidden,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

type CreateLeadeboardFieldsParams struct {
	Lid        int32
	FieldName  string
	FieldValue FieldType
	FieldOrder int32
	ForRank    bool
	Required   bool
	Hidden     bool
}

const deleteField = `-- name: DeleteField :exec
DELETE FROM leaderboard_fields
  WHERE lid = $1 AND field_name = $2
`

type DeleteFieldParams struct {
	Lid       int32
	FieldName string
}

func (q *Queries) DeleteField(ctx context.Context, arg DeleteFieldParams) error {
	_, err := q.db.Exec(ctx, deleteField, arg.Lid, arg.FieldName)
	return err
}

const deleteFieldByID = `-- name: DeleteFieldByID :exec
DELETE FROM leaderboard_fields
  WHERE id = $1
`

func (q *Queries) DeleteFieldByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteFieldByID, id)
	return err
}

const getFieldByID = `-- name: GetFieldByID :one
SELECT lid, field_name, field_value, field_order, for_rank, hidden, required, id
FROM leaderboard_fields
WHERE id = $1
`

func (q *Queries) GetFieldByID(ctx context.Context, id int32) (LeaderboardField, error) {
	row := q.db.QueryRow(ctx, getFieldByID, id)
	var i LeaderboardField
	err := row.Scan(
		&i.Lid,
		&i.FieldName,
		&i.FieldValue,
		&i.FieldOrder,
		&i.ForRank,
		&i.Hidden,
		&i.Required,
		&i.ID,
	)
	return i, err
}

const getFieldByLID = `-- name: GetFieldByLID :one
SELECT lid, field_name, field_value, field_order, for_rank, hidden, required, id
FROM leaderboard_fields
WHERE lid = $1 AND field_name = $2
`

type GetFieldByLIDParams struct {
	Lid       int32
	FieldName string
}

func (q *Queries) GetFieldByLID(ctx context.Context, arg GetFieldByLIDParams) (LeaderboardField, error) {
	row := q.db.QueryRow(ctx, getFieldByLID, arg.Lid, arg.FieldName)
	var i LeaderboardField
	err := row.Scan(
		&i.Lid,
		&i.FieldName,
		&i.FieldValue,
		&i.FieldOrder,
		&i.ForRank,
		&i.Hidden,
		&i.Required,
		&i.ID,
	)
	return i, err
}

const getLeaderboardFieldsByLID = `-- name: GetLeaderboardFieldsByLID :many
SELECT lid, field_name, field_value, field_order, for_rank, hidden, required, id
FROM leaderboard_fields
WHERE lid = $1
`

func (q *Queries) GetLeaderboardFieldsByLID(ctx context.Context, lid int32) ([]LeaderboardField, error) {
	rows, err := q.db.Query(ctx, getLeaderboardFieldsByLID, lid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeaderboardField
	for rows.Next() {
		var i LeaderboardField
		if err := rows.Scan(
			&i.Lid,
			&i.FieldName,
			&i.FieldValue,
			&i.FieldOrder,
			&i.ForRank,
			&i.Hidden,
			&i.Required,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFieldsName = `-- name: UpdateFieldsName :exec
UPDATE leaderboard_fields SET field_name = $3 WHERE lid = $1 AND field_name = $2
`

type UpdateFieldsNameParams struct {
	Lid          int32
	FieldName    string
	NewFieldName string
}

func (q *Queries) UpdateFieldsName(ctx context.Context, arg UpdateFieldsNameParams) error {
	_, err := q.db.Exec(ctx, updateFieldsName, arg.Lid, arg.FieldName, arg.NewFieldName)
	return err
}

const updateFieldsNameByID = `-- name: UpdateFieldsNameByID :exec
UPDATE leaderboard_fields SET field_name = $2 WHERE id = $1
`

type UpdateFieldsNameByIDParams struct {
	ID           int32
	NewFieldName string
}

func (q *Queries) UpdateFieldsNameByID(ctx context.Context, arg UpdateFieldsNameByIDParams) error {
	_, err := q.db.Exec(ctx, updateFieldsNameByID, arg.ID, arg.NewFieldName)
	return err
}
