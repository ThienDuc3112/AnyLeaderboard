// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorites.sql

package database

import (
	"context"
)

const addFavorite = `-- name: AddFavorite :exec
INSERT INTO leaderboard_favourites (
    user_id,
    leaderboard_id
) 
VALUES ($1, $2)
`

type AddFavoriteParams struct {
	UserID        int32
	LeaderboardID int32
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) error {
	_, err := q.db.Exec(ctx, addFavorite, arg.UserID, arg.LeaderboardID)
	return err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM leaderboard_favourites
WHERE user_id = $1 AND leaderboard_id = $2
`

type DeleteFavoriteParams struct {
	UserID        int32
	LeaderboardID int32
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.Exec(ctx, deleteFavorite, arg.UserID, arg.LeaderboardID)
	return err
}

const deleteUserFavorite = `-- name: DeleteUserFavorite :exec
DELETE FROM leaderboard_favourites
WHERE user_id = $1
`

func (q *Queries) DeleteUserFavorite(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteUserFavorite, userID)
	return err
}

const getUserFavorite = `-- name: GetUserFavorite :many
SELECT user_id, leaderboard_id FROM leaderboard_favourites WHERE user_id = $1
`

func (q *Queries) GetUserFavorite(ctx context.Context, userID int32) ([]LeaderboardFavourite, error) {
	rows, err := q.db.Query(ctx, getUserFavorite, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeaderboardFavourite
	for rows.Next() {
		var i LeaderboardFavourite
		if err := rows.Scan(&i.UserID, &i.LeaderboardID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
