// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leaderboard_verifiers.sql

package database

import (
	"context"
)

const addVerifier = `-- name: AddVerifier :exec
INSERT INTO leaderboard_verifiers (leaderboard_id, user_id)
VALUES ($1, $2)
`

type AddVerifierParams struct {
	LeaderboardID int32
	UserID        int32
}

func (q *Queries) AddVerifier(ctx context.Context, arg AddVerifierParams) error {
	_, err := q.db.Exec(ctx, addVerifier, arg.LeaderboardID, arg.UserID)
	return err
}

const getVerifiers = `-- name: GetVerifiers :many
SELECT u.id, u.created_at, u.updated_at, u.username, u.display_name, u.email, u.password, u.description
FROM leaderboard_verifiers v,
    users u
WHERE v.leaderboard_id = $1
    AND v.user_id = u.id
`

func (q *Queries) GetVerifiers(ctx context.Context, leaderboardID int32) ([]User, error) {
	rows, err := q.db.Query(ctx, getVerifiers, leaderboardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.DisplayName,
			&i.Email,
			&i.Password,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeVerifier = `-- name: RemoveVerifier :exec
DELETE FROM leaderboard_verifiers
WHERE user_id = $1
    AND leaderboard_id = $2
`

type RemoveVerifierParams struct {
	UserID        int32
	LeaderboardID int32
}

func (q *Queries) RemoveVerifier(ctx context.Context, arg RemoveVerifierParams) error {
	_, err := q.db.Exec(ctx, removeVerifier, arg.UserID, arg.LeaderboardID)
	return err
}
