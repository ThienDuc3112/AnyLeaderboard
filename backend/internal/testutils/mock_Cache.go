// Code generated by mockery v2.50.1. DO NOT EDIT.

package testutils

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0
func (_m *MockCache) Delete(_a0 string) {
	_m.Called(_a0)
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCache_Expecter) Delete(_a0 interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *MockCache_Delete_Call) Run(run func(_a0 string)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return() *MockCache_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(string)) *MockCache_Delete_Call {
	_c.Run(run)
	return _c
}

// DeleteExpired provides a mock function with no fields
func (_m *MockCache) DeleteExpired() {
	_m.Called()
}

// MockCache_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockCache_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
func (_e *MockCache_Expecter) DeleteExpired() *MockCache_DeleteExpired_Call {
	return &MockCache_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired")}
}

func (_c *MockCache_DeleteExpired_Call) Run(run func()) *MockCache_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_DeleteExpired_Call) Return() *MockCache_DeleteExpired_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_DeleteExpired_Call) RunAndReturn(run func()) *MockCache_DeleteExpired_Call {
	_c.Run(run)
	return _c
}

// Flush provides a mock function with no fields
func (_m *MockCache) Flush() {
	_m.Called()
}

// MockCache_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockCache_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockCache_Expecter) Flush() *MockCache_Flush_Call {
	return &MockCache_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockCache_Flush_Call) Run(run func()) *MockCache_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Flush_Call) Return() *MockCache_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Flush_Call) RunAndReturn(run func()) *MockCache_Flush_Call {
	_c.Run(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *MockCache) Get(_a0 string) (any, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (any, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) any); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCache_Expecter) Get(_a0 interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *MockCache_Get_Call) Run(run func(_a0 string)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(_a0 any, _a1 bool) *MockCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(string) (any, bool)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithExpiration provides a mock function with given fields: _a0
func (_m *MockCache) GetWithExpiration(_a0 string) (any, time.Time, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWithExpiration")
	}

	var r0 any
	var r1 time.Time
	var r2 bool
	if rf, ok := ret.Get(0).(func(string) (any, time.Time, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) any); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(string) time.Time); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// MockCache_GetWithExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithExpiration'
type MockCache_GetWithExpiration_Call struct {
	*mock.Call
}

// GetWithExpiration is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCache_Expecter) GetWithExpiration(_a0 interface{}) *MockCache_GetWithExpiration_Call {
	return &MockCache_GetWithExpiration_Call{Call: _e.mock.On("GetWithExpiration", _a0)}
}

func (_c *MockCache_GetWithExpiration_Call) Run(run func(_a0 string)) *MockCache_GetWithExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCache_GetWithExpiration_Call) Return(_a0 any, _a1 time.Time, _a2 bool) *MockCache_GetWithExpiration_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCache_GetWithExpiration_Call) RunAndReturn(run func(string) (any, time.Time, bool)) *MockCache_GetWithExpiration_Call {
	_c.Call.Return(run)
	return _c
}

// OnEvicted provides a mock function with given fields: _a0
func (_m *MockCache) OnEvicted(_a0 func(string, any)) {
	_m.Called(_a0)
}

// MockCache_OnEvicted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEvicted'
type MockCache_OnEvicted_Call struct {
	*mock.Call
}

// OnEvicted is a helper method to define mock.On call
//   - _a0 func(string , any)
func (_e *MockCache_Expecter) OnEvicted(_a0 interface{}) *MockCache_OnEvicted_Call {
	return &MockCache_OnEvicted_Call{Call: _e.mock.On("OnEvicted", _a0)}
}

func (_c *MockCache_OnEvicted_Call) Run(run func(_a0 func(string, any))) *MockCache_OnEvicted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, any)))
	})
	return _c
}

func (_c *MockCache_OnEvicted_Call) Return() *MockCache_OnEvicted_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_OnEvicted_Call) RunAndReturn(run func(func(string, any))) *MockCache_OnEvicted_Call {
	_c.Run(run)
	return _c
}

// Replace provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCache) Replace(_a0 string, _a1 any, _a2 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, any, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Replace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replace'
type MockCache_Replace_Call struct {
	*mock.Call
}

// Replace is a helper method to define mock.On call
//   - _a0 string
//   - _a1 any
//   - _a2 time.Duration
func (_e *MockCache_Expecter) Replace(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockCache_Replace_Call {
	return &MockCache_Replace_Call{Call: _e.mock.On("Replace", _a0, _a1, _a2)}
}

func (_c *MockCache_Replace_Call) Run(run func(_a0 string, _a1 any, _a2 time.Duration)) *MockCache_Replace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCache_Replace_Call) Return(_a0 error) *MockCache_Replace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Replace_Call) RunAndReturn(run func(string, any, time.Duration) error) *MockCache_Replace_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCache) Set(_a0 string, _a1 any, _a2 time.Duration) {
	_m.Called(_a0, _a1, _a2)
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 string
//   - _a1 any
//   - _a2 time.Duration
func (_e *MockCache_Expecter) Set(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", _a0, _a1, _a2)}
}

func (_c *MockCache_Set_Call) Run(run func(_a0 string, _a1 any, _a2 time.Duration)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockCache_Set_Call) Return() *MockCache_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(string, any, time.Duration)) *MockCache_Set_Call {
	_c.Run(run)
	return _c
}

// SetDefault provides a mock function with given fields: _a0, _a1
func (_m *MockCache) SetDefault(_a0 string, _a1 any) {
	_m.Called(_a0, _a1)
}

// MockCache_SetDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefault'
type MockCache_SetDefault_Call struct {
	*mock.Call
}

// SetDefault is a helper method to define mock.On call
//   - _a0 string
//   - _a1 any
func (_e *MockCache_Expecter) SetDefault(_a0 interface{}, _a1 interface{}) *MockCache_SetDefault_Call {
	return &MockCache_SetDefault_Call{Call: _e.mock.On("SetDefault", _a0, _a1)}
}

func (_c *MockCache_SetDefault_Call) Run(run func(_a0 string, _a1 any)) *MockCache_SetDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *MockCache_SetDefault_Call) Return() *MockCache_SetDefault_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCache_SetDefault_Call) RunAndReturn(run func(string, any)) *MockCache_SetDefault_Call {
	_c.Run(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
