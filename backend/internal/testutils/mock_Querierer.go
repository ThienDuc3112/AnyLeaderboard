// Code generated by mockery v2.53.0. DO NOT EDIT.

package testutils

import (
	database "anylbapi/internal/database"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuerierer is an autogenerated mock type for the Querierer type
type MockQuerierer struct {
	mock.Mock
}

type MockQuerierer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerierer) EXPECT() *MockQuerierer_Expecter {
	return &MockQuerierer_Expecter{mock: &_m.Mock}
}

// AddFavorite provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) AddFavorite(ctx context.Context, arg database.AddFavoriteParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AddFavoriteParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_AddFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFavorite'
type MockQuerierer_AddFavorite_Call struct {
	*mock.Call
}

// AddFavorite is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AddFavoriteParams
func (_e *MockQuerierer_Expecter) AddFavorite(ctx interface{}, arg interface{}) *MockQuerierer_AddFavorite_Call {
	return &MockQuerierer_AddFavorite_Call{Call: _e.mock.On("AddFavorite", ctx, arg)}
}

func (_c *MockQuerierer_AddFavorite_Call) Run(run func(ctx context.Context, arg database.AddFavoriteParams)) *MockQuerierer_AddFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AddFavoriteParams))
	})
	return _c
}

func (_c *MockQuerierer_AddFavorite_Call) Return(_a0 error) *MockQuerierer_AddFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_AddFavorite_Call) RunAndReturn(run func(context.Context, database.AddFavoriteParams) error) *MockQuerierer_AddFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// AddFieldToEntriesByLeaderboardId provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) AddFieldToEntriesByLeaderboardId(ctx context.Context, arg database.AddFieldToEntriesByLeaderboardIdParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddFieldToEntriesByLeaderboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AddFieldToEntriesByLeaderboardIdParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_AddFieldToEntriesByLeaderboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFieldToEntriesByLeaderboardId'
type MockQuerierer_AddFieldToEntriesByLeaderboardId_Call struct {
	*mock.Call
}

// AddFieldToEntriesByLeaderboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AddFieldToEntriesByLeaderboardIdParams
func (_e *MockQuerierer_Expecter) AddFieldToEntriesByLeaderboardId(ctx interface{}, arg interface{}) *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call {
	return &MockQuerierer_AddFieldToEntriesByLeaderboardId_Call{Call: _e.mock.On("AddFieldToEntriesByLeaderboardId", ctx, arg)}
}

func (_c *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call) Run(run func(ctx context.Context, arg database.AddFieldToEntriesByLeaderboardIdParams)) *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AddFieldToEntriesByLeaderboardIdParams))
	})
	return _c
}

func (_c *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call) Return(_a0 error) *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call) RunAndReturn(run func(context.Context, database.AddFieldToEntriesByLeaderboardIdParams) error) *MockQuerierer_AddFieldToEntriesByLeaderboardId_Call {
	_c.Call.Return(run)
	return _c
}

// AddLeaderboardOption provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) AddLeaderboardOption(ctx context.Context, arg database.AddLeaderboardOptionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddLeaderboardOption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AddLeaderboardOptionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_AddLeaderboardOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLeaderboardOption'
type MockQuerierer_AddLeaderboardOption_Call struct {
	*mock.Call
}

// AddLeaderboardOption is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AddLeaderboardOptionParams
func (_e *MockQuerierer_Expecter) AddLeaderboardOption(ctx interface{}, arg interface{}) *MockQuerierer_AddLeaderboardOption_Call {
	return &MockQuerierer_AddLeaderboardOption_Call{Call: _e.mock.On("AddLeaderboardOption", ctx, arg)}
}

func (_c *MockQuerierer_AddLeaderboardOption_Call) Run(run func(ctx context.Context, arg database.AddLeaderboardOptionParams)) *MockQuerierer_AddLeaderboardOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AddLeaderboardOptionParams))
	})
	return _c
}

func (_c *MockQuerierer_AddLeaderboardOption_Call) Return(_a0 error) *MockQuerierer_AddLeaderboardOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_AddLeaderboardOption_Call) RunAndReturn(run func(context.Context, database.AddLeaderboardOptionParams) error) *MockQuerierer_AddLeaderboardOption_Call {
	_c.Call.Return(run)
	return _c
}

// AddVerifier provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) AddVerifier(ctx context.Context, arg database.AddVerifierParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddVerifier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AddVerifierParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_AddVerifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVerifier'
type MockQuerierer_AddVerifier_Call struct {
	*mock.Call
}

// AddVerifier is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.AddVerifierParams
func (_e *MockQuerierer_Expecter) AddVerifier(ctx interface{}, arg interface{}) *MockQuerierer_AddVerifier_Call {
	return &MockQuerierer_AddVerifier_Call{Call: _e.mock.On("AddVerifier", ctx, arg)}
}

func (_c *MockQuerierer_AddVerifier_Call) Run(run func(ctx context.Context, arg database.AddVerifierParams)) *MockQuerierer_AddVerifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AddVerifierParams))
	})
	return _c
}

func (_c *MockQuerierer_AddVerifier_Call) Return(_a0 error) *MockQuerierer_AddVerifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_AddVerifier_Call) RunAndReturn(run func(context.Context, database.AddVerifierParams) error) *MockQuerierer_AddVerifier_Call {
	_c.Call.Return(run)
	return _c
}

// BeginTx provides a mock function with given fields: ctx
func (_m *MockQuerierer) BeginTx(ctx context.Context) (database.Querierer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 database.Querierer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (database.Querierer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) database.Querierer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Querierer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockQuerierer_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerierer_Expecter) BeginTx(ctx interface{}) *MockQuerierer_BeginTx_Call {
	return &MockQuerierer_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *MockQuerierer_BeginTx_Call) Run(run func(ctx context.Context)) *MockQuerierer_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerierer_BeginTx_Call) Return(_a0 database.Querierer, _a1 error) *MockQuerierer_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_BeginTx_Call) RunAndReturn(run func(context.Context) (database.Querierer, error)) *MockQuerierer_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx
func (_m *MockQuerierer) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockQuerierer_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerierer_Expecter) Commit(ctx interface{}) *MockQuerierer_Commit_Call {
	return &MockQuerierer_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockQuerierer_Commit_Call) Run(run func(ctx context.Context)) *MockQuerierer_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerierer_Commit_Call) Return(_a0 error) *MockQuerierer_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_Commit_Call) RunAndReturn(run func(context.Context) error) *MockQuerierer_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeadeboardEntry provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeadeboardEntry(ctx context.Context, arg database.CreateLeadeboardEntryParams) (database.LeaderboardEntry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeadeboardEntry")
	}

	var r0 database.LeaderboardEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateLeadeboardEntryParams) (database.LeaderboardEntry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateLeadeboardEntryParams) database.LeaderboardEntry); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.LeaderboardEntry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateLeadeboardEntryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateLeadeboardEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeadeboardEntry'
type MockQuerierer_CreateLeadeboardEntry_Call struct {
	*mock.Call
}

// CreateLeadeboardEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateLeadeboardEntryParams
func (_e *MockQuerierer_Expecter) CreateLeadeboardEntry(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeadeboardEntry_Call {
	return &MockQuerierer_CreateLeadeboardEntry_Call{Call: _e.mock.On("CreateLeadeboardEntry", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeadeboardEntry_Call) Run(run func(ctx context.Context, arg database.CreateLeadeboardEntryParams)) *MockQuerierer_CreateLeadeboardEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateLeadeboardEntryParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardEntry_Call) Return(_a0 database.LeaderboardEntry, _a1 error) *MockQuerierer_CreateLeadeboardEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardEntry_Call) RunAndReturn(run func(context.Context, database.CreateLeadeboardEntryParams) (database.LeaderboardEntry, error)) *MockQuerierer_CreateLeadeboardEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeadeboardField provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeadeboardField(ctx context.Context, arg database.CreateLeadeboardFieldParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeadeboardField")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateLeadeboardFieldParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_CreateLeadeboardField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeadeboardField'
type MockQuerierer_CreateLeadeboardField_Call struct {
	*mock.Call
}

// CreateLeadeboardField is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateLeadeboardFieldParams
func (_e *MockQuerierer_Expecter) CreateLeadeboardField(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeadeboardField_Call {
	return &MockQuerierer_CreateLeadeboardField_Call{Call: _e.mock.On("CreateLeadeboardField", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeadeboardField_Call) Run(run func(ctx context.Context, arg database.CreateLeadeboardFieldParams)) *MockQuerierer_CreateLeadeboardField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateLeadeboardFieldParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardField_Call) Return(_a0 error) *MockQuerierer_CreateLeadeboardField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardField_Call) RunAndReturn(run func(context.Context, database.CreateLeadeboardFieldParams) error) *MockQuerierer_CreateLeadeboardField_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeadeboardFields provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeadeboardFields(ctx context.Context, arg []database.CreateLeadeboardFieldsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeadeboardFields")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeadeboardFieldsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeadeboardFieldsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []database.CreateLeadeboardFieldsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateLeadeboardFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeadeboardFields'
type MockQuerierer_CreateLeadeboardFields_Call struct {
	*mock.Call
}

// CreateLeadeboardFields is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []database.CreateLeadeboardFieldsParams
func (_e *MockQuerierer_Expecter) CreateLeadeboardFields(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeadeboardFields_Call {
	return &MockQuerierer_CreateLeadeboardFields_Call{Call: _e.mock.On("CreateLeadeboardFields", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeadeboardFields_Call) Run(run func(ctx context.Context, arg []database.CreateLeadeboardFieldsParams)) *MockQuerierer_CreateLeadeboardFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.CreateLeadeboardFieldsParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardFields_Call) Return(_a0 int64, _a1 error) *MockQuerierer_CreateLeadeboardFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardFields_Call) RunAndReturn(run func(context.Context, []database.CreateLeadeboardFieldsParams) (int64, error)) *MockQuerierer_CreateLeadeboardFields_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeadeboardOptions provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeadeboardOptions(ctx context.Context, arg []database.CreateLeadeboardOptionsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeadeboardOptions")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeadeboardOptionsParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeadeboardOptionsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []database.CreateLeadeboardOptionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateLeadeboardOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeadeboardOptions'
type MockQuerierer_CreateLeadeboardOptions_Call struct {
	*mock.Call
}

// CreateLeadeboardOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []database.CreateLeadeboardOptionsParams
func (_e *MockQuerierer_Expecter) CreateLeadeboardOptions(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeadeboardOptions_Call {
	return &MockQuerierer_CreateLeadeboardOptions_Call{Call: _e.mock.On("CreateLeadeboardOptions", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeadeboardOptions_Call) Run(run func(ctx context.Context, arg []database.CreateLeadeboardOptionsParams)) *MockQuerierer_CreateLeadeboardOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.CreateLeadeboardOptionsParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardOptions_Call) Return(_a0 int64, _a1 error) *MockQuerierer_CreateLeadeboardOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateLeadeboardOptions_Call) RunAndReturn(run func(context.Context, []database.CreateLeadeboardOptionsParams) (int64, error)) *MockQuerierer_CreateLeadeboardOptions_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeaderboard provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeaderboard(ctx context.Context, arg database.CreateLeaderboardParams) (database.CreateLeaderboardRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaderboard")
	}

	var r0 database.CreateLeaderboardRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateLeaderboardParams) (database.CreateLeaderboardRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateLeaderboardParams) database.CreateLeaderboardRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.CreateLeaderboardRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateLeaderboardParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateLeaderboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeaderboard'
type MockQuerierer_CreateLeaderboard_Call struct {
	*mock.Call
}

// CreateLeaderboard is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateLeaderboardParams
func (_e *MockQuerierer_Expecter) CreateLeaderboard(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeaderboard_Call {
	return &MockQuerierer_CreateLeaderboard_Call{Call: _e.mock.On("CreateLeaderboard", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeaderboard_Call) Run(run func(ctx context.Context, arg database.CreateLeaderboardParams)) *MockQuerierer_CreateLeaderboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateLeaderboardParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeaderboard_Call) Return(_a0 database.CreateLeaderboardRow, _a1 error) *MockQuerierer_CreateLeaderboard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateLeaderboard_Call) RunAndReturn(run func(context.Context, database.CreateLeaderboardParams) (database.CreateLeaderboardRow, error)) *MockQuerierer_CreateLeaderboard_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLeaderboardExternalLink provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateLeaderboardExternalLink(ctx context.Context, arg []database.CreateLeaderboardExternalLinkParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateLeaderboardExternalLink")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeaderboardExternalLinkParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []database.CreateLeaderboardExternalLinkParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []database.CreateLeaderboardExternalLinkParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateLeaderboardExternalLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLeaderboardExternalLink'
type MockQuerierer_CreateLeaderboardExternalLink_Call struct {
	*mock.Call
}

// CreateLeaderboardExternalLink is a helper method to define mock.On call
//   - ctx context.Context
//   - arg []database.CreateLeaderboardExternalLinkParams
func (_e *MockQuerierer_Expecter) CreateLeaderboardExternalLink(ctx interface{}, arg interface{}) *MockQuerierer_CreateLeaderboardExternalLink_Call {
	return &MockQuerierer_CreateLeaderboardExternalLink_Call{Call: _e.mock.On("CreateLeaderboardExternalLink", ctx, arg)}
}

func (_c *MockQuerierer_CreateLeaderboardExternalLink_Call) Run(run func(ctx context.Context, arg []database.CreateLeaderboardExternalLinkParams)) *MockQuerierer_CreateLeaderboardExternalLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.CreateLeaderboardExternalLinkParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateLeaderboardExternalLink_Call) Return(_a0 int64, _a1 error) *MockQuerierer_CreateLeaderboardExternalLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateLeaderboardExternalLink_Call) RunAndReturn(run func(context.Context, []database.CreateLeaderboardExternalLinkParams) (int64, error)) *MockQuerierer_CreateLeaderboardExternalLink_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewRefreshToken provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateNewRefreshToken(ctx context.Context, arg database.CreateNewRefreshTokenParams) (database.RefreshToken, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewRefreshToken")
	}

	var r0 database.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateNewRefreshTokenParams) (database.RefreshToken, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateNewRefreshTokenParams) database.RefreshToken); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.CreateNewRefreshTokenParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_CreateNewRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewRefreshToken'
type MockQuerierer_CreateNewRefreshToken_Call struct {
	*mock.Call
}

// CreateNewRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateNewRefreshTokenParams
func (_e *MockQuerierer_Expecter) CreateNewRefreshToken(ctx interface{}, arg interface{}) *MockQuerierer_CreateNewRefreshToken_Call {
	return &MockQuerierer_CreateNewRefreshToken_Call{Call: _e.mock.On("CreateNewRefreshToken", ctx, arg)}
}

func (_c *MockQuerierer_CreateNewRefreshToken_Call) Run(run func(ctx context.Context, arg database.CreateNewRefreshTokenParams)) *MockQuerierer_CreateNewRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateNewRefreshTokenParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateNewRefreshToken_Call) Return(_a0 database.RefreshToken, _a1 error) *MockQuerierer_CreateNewRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_CreateNewRefreshToken_Call) RunAndReturn(run func(context.Context, database.CreateNewRefreshTokenParams) (database.RefreshToken, error)) *MockQuerierer_CreateNewRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateUser(ctx context.Context, arg database.CreateUserParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerierer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateUserParams
func (_e *MockQuerierer_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerierer_CreateUser_Call {
	return &MockQuerierer_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerierer_CreateUser_Call) Run(run func(ctx context.Context, arg database.CreateUserParams)) *MockQuerierer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateUserParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateUser_Call) Return(_a0 error) *MockQuerierer_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_CreateUser_Call) RunAndReturn(run func(context.Context, database.CreateUserParams) error) *MockQuerierer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEntry provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) DeleteEntry(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEntry'
type MockQuerierer_DeleteEntry_Call struct {
	*mock.Call
}

// DeleteEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) DeleteEntry(ctx interface{}, id interface{}) *MockQuerierer_DeleteEntry_Call {
	return &MockQuerierer_DeleteEntry_Call{Call: _e.mock.On("DeleteEntry", ctx, id)}
}

func (_c *MockQuerierer_DeleteEntry_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_DeleteEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_DeleteEntry_Call) Return(_a0 error) *MockQuerierer_DeleteEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteEntry_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_DeleteEntry_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFavorite provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) DeleteFavorite(ctx context.Context, arg database.DeleteFavoriteParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteFavoriteParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFavorite'
type MockQuerierer_DeleteFavorite_Call struct {
	*mock.Call
}

// DeleteFavorite is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.DeleteFavoriteParams
func (_e *MockQuerierer_Expecter) DeleteFavorite(ctx interface{}, arg interface{}) *MockQuerierer_DeleteFavorite_Call {
	return &MockQuerierer_DeleteFavorite_Call{Call: _e.mock.On("DeleteFavorite", ctx, arg)}
}

func (_c *MockQuerierer_DeleteFavorite_Call) Run(run func(ctx context.Context, arg database.DeleteFavoriteParams)) *MockQuerierer_DeleteFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteFavoriteParams))
	})
	return _c
}

func (_c *MockQuerierer_DeleteFavorite_Call) Return(_a0 error) *MockQuerierer_DeleteFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteFavorite_Call) RunAndReturn(run func(context.Context, database.DeleteFavoriteParams) error) *MockQuerierer_DeleteFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteField provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) DeleteField(ctx context.Context, arg database.DeleteFieldParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteField")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteFieldParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteField'
type MockQuerierer_DeleteField_Call struct {
	*mock.Call
}

// DeleteField is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.DeleteFieldParams
func (_e *MockQuerierer_Expecter) DeleteField(ctx interface{}, arg interface{}) *MockQuerierer_DeleteField_Call {
	return &MockQuerierer_DeleteField_Call{Call: _e.mock.On("DeleteField", ctx, arg)}
}

func (_c *MockQuerierer_DeleteField_Call) Run(run func(ctx context.Context, arg database.DeleteFieldParams)) *MockQuerierer_DeleteField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteFieldParams))
	})
	return _c
}

func (_c *MockQuerierer_DeleteField_Call) Return(_a0 error) *MockQuerierer_DeleteField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteField_Call) RunAndReturn(run func(context.Context, database.DeleteFieldParams) error) *MockQuerierer_DeleteField_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFieldOnEntriesByLeaderboardId provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) DeleteFieldOnEntriesByLeaderboardId(ctx context.Context, arg database.DeleteFieldOnEntriesByLeaderboardIdParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFieldOnEntriesByLeaderboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteFieldOnEntriesByLeaderboardIdParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFieldOnEntriesByLeaderboardId'
type MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call struct {
	*mock.Call
}

// DeleteFieldOnEntriesByLeaderboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.DeleteFieldOnEntriesByLeaderboardIdParams
func (_e *MockQuerierer_Expecter) DeleteFieldOnEntriesByLeaderboardId(ctx interface{}, arg interface{}) *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call {
	return &MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call{Call: _e.mock.On("DeleteFieldOnEntriesByLeaderboardId", ctx, arg)}
}

func (_c *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call) Run(run func(ctx context.Context, arg database.DeleteFieldOnEntriesByLeaderboardIdParams)) *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteFieldOnEntriesByLeaderboardIdParams))
	})
	return _c
}

func (_c *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call) Return(_a0 error) *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call) RunAndReturn(run func(context.Context, database.DeleteFieldOnEntriesByLeaderboardIdParams) error) *MockQuerierer_DeleteFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLeadeboardOption provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) DeleteLeadeboardOption(ctx context.Context, arg database.DeleteLeadeboardOptionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLeadeboardOption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteLeadeboardOptionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteLeadeboardOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLeadeboardOption'
type MockQuerierer_DeleteLeadeboardOption_Call struct {
	*mock.Call
}

// DeleteLeadeboardOption is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.DeleteLeadeboardOptionParams
func (_e *MockQuerierer_Expecter) DeleteLeadeboardOption(ctx interface{}, arg interface{}) *MockQuerierer_DeleteLeadeboardOption_Call {
	return &MockQuerierer_DeleteLeadeboardOption_Call{Call: _e.mock.On("DeleteLeadeboardOption", ctx, arg)}
}

func (_c *MockQuerierer_DeleteLeadeboardOption_Call) Run(run func(ctx context.Context, arg database.DeleteLeadeboardOptionParams)) *MockQuerierer_DeleteLeadeboardOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteLeadeboardOptionParams))
	})
	return _c
}

func (_c *MockQuerierer_DeleteLeadeboardOption_Call) Return(_a0 error) *MockQuerierer_DeleteLeadeboardOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteLeadeboardOption_Call) RunAndReturn(run func(context.Context, database.DeleteLeadeboardOptionParams) error) *MockQuerierer_DeleteLeadeboardOption_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLeadeboardOptions provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) DeleteLeadeboardOptions(ctx context.Context, arg database.DeleteLeadeboardOptionsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLeadeboardOptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeleteLeadeboardOptionsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteLeadeboardOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLeadeboardOptions'
type MockQuerierer_DeleteLeadeboardOptions_Call struct {
	*mock.Call
}

// DeleteLeadeboardOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.DeleteLeadeboardOptionsParams
func (_e *MockQuerierer_Expecter) DeleteLeadeboardOptions(ctx interface{}, arg interface{}) *MockQuerierer_DeleteLeadeboardOptions_Call {
	return &MockQuerierer_DeleteLeadeboardOptions_Call{Call: _e.mock.On("DeleteLeadeboardOptions", ctx, arg)}
}

func (_c *MockQuerierer_DeleteLeadeboardOptions_Call) Run(run func(ctx context.Context, arg database.DeleteLeadeboardOptionsParams)) *MockQuerierer_DeleteLeadeboardOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeleteLeadeboardOptionsParams))
	})
	return _c
}

func (_c *MockQuerierer_DeleteLeadeboardOptions_Call) Return(_a0 error) *MockQuerierer_DeleteLeadeboardOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteLeadeboardOptions_Call) RunAndReturn(run func(context.Context, database.DeleteLeadeboardOptionsParams) error) *MockQuerierer_DeleteLeadeboardOptions_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLeaderboard provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) DeleteLeaderboard(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLeaderboard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteLeaderboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLeaderboard'
type MockQuerierer_DeleteLeaderboard_Call struct {
	*mock.Call
}

// DeleteLeaderboard is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) DeleteLeaderboard(ctx interface{}, id interface{}) *MockQuerierer_DeleteLeaderboard_Call {
	return &MockQuerierer_DeleteLeaderboard_Call{Call: _e.mock.On("DeleteLeaderboard", ctx, id)}
}

func (_c *MockQuerierer_DeleteLeaderboard_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_DeleteLeaderboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_DeleteLeaderboard_Call) Return(_a0 error) *MockQuerierer_DeleteLeaderboard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteLeaderboard_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_DeleteLeaderboard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) DeleteUser(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockQuerierer_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockQuerierer_DeleteUser_Call {
	return &MockQuerierer_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockQuerierer_DeleteUser_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_DeleteUser_Call) Return(_a0 error) *MockQuerierer_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteUser_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockQuerierer) DeleteUserByUsername(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByUsername")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByUsername'
type MockQuerierer_DeleteUserByUsername_Call struct {
	*mock.Call
}

// DeleteUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerierer_Expecter) DeleteUserByUsername(ctx interface{}, username interface{}) *MockQuerierer_DeleteUserByUsername_Call {
	return &MockQuerierer_DeleteUserByUsername_Call{Call: _e.mock.On("DeleteUserByUsername", ctx, username)}
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) Return(_a0 error) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserFavorite provides a mock function with given fields: ctx, userID
func (_m *MockQuerierer) DeleteUserFavorite(ctx context.Context, userID int32) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserFavorite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteUserFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserFavorite'
type MockQuerierer_DeleteUserFavorite_Call struct {
	*mock.Call
}

// DeleteUserFavorite is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *MockQuerierer_Expecter) DeleteUserFavorite(ctx interface{}, userID interface{}) *MockQuerierer_DeleteUserFavorite_Call {
	return &MockQuerierer_DeleteUserFavorite_Call{Call: _e.mock.On("DeleteUserFavorite", ctx, userID)}
}

func (_c *MockQuerierer_DeleteUserFavorite_Call) Run(run func(ctx context.Context, userID int32)) *MockQuerierer_DeleteUserFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_DeleteUserFavorite_Call) Return(_a0 error) *MockQuerierer_DeleteUserFavorite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteUserFavorite_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_DeleteUserFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEntriesByUsername provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetAllEntriesByUsername(ctx context.Context, arg database.GetAllEntriesByUsernameParams) ([]database.LeaderboardEntry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEntriesByUsername")
	}

	var r0 []database.LeaderboardEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetAllEntriesByUsernameParams) ([]database.LeaderboardEntry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetAllEntriesByUsernameParams) []database.LeaderboardEntry); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LeaderboardEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetAllEntriesByUsernameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetAllEntriesByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntriesByUsername'
type MockQuerierer_GetAllEntriesByUsername_Call struct {
	*mock.Call
}

// GetAllEntriesByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetAllEntriesByUsernameParams
func (_e *MockQuerierer_Expecter) GetAllEntriesByUsername(ctx interface{}, arg interface{}) *MockQuerierer_GetAllEntriesByUsername_Call {
	return &MockQuerierer_GetAllEntriesByUsername_Call{Call: _e.mock.On("GetAllEntriesByUsername", ctx, arg)}
}

func (_c *MockQuerierer_GetAllEntriesByUsername_Call) Run(run func(ctx context.Context, arg database.GetAllEntriesByUsernameParams)) *MockQuerierer_GetAllEntriesByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetAllEntriesByUsernameParams))
	})
	return _c
}

func (_c *MockQuerierer_GetAllEntriesByUsername_Call) Return(_a0 []database.LeaderboardEntry, _a1 error) *MockQuerierer_GetAllEntriesByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetAllEntriesByUsername_Call) RunAndReturn(run func(context.Context, database.GetAllEntriesByUsernameParams) ([]database.LeaderboardEntry, error)) *MockQuerierer_GetAllEntriesByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntries provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetEntries(ctx context.Context, arg database.GetEntriesParams) ([]database.LeaderboardEntry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetEntries")
	}

	var r0 []database.LeaderboardEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetEntriesParams) ([]database.LeaderboardEntry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetEntriesParams) []database.LeaderboardEntry); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LeaderboardEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetEntriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntries'
type MockQuerierer_GetEntries_Call struct {
	*mock.Call
}

// GetEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetEntriesParams
func (_e *MockQuerierer_Expecter) GetEntries(ctx interface{}, arg interface{}) *MockQuerierer_GetEntries_Call {
	return &MockQuerierer_GetEntries_Call{Call: _e.mock.On("GetEntries", ctx, arg)}
}

func (_c *MockQuerierer_GetEntries_Call) Run(run func(ctx context.Context, arg database.GetEntriesParams)) *MockQuerierer_GetEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetEntriesParams))
	})
	return _c
}

func (_c *MockQuerierer_GetEntries_Call) Return(_a0 []database.LeaderboardEntry, _a1 error) *MockQuerierer_GetEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetEntries_Call) RunAndReturn(run func(context.Context, database.GetEntriesParams) ([]database.LeaderboardEntry, error)) *MockQuerierer_GetEntries_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntriesCount provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetEntriesCount(ctx context.Context, arg database.GetEntriesParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetEntriesCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetEntriesParams) (int64, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetEntriesParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetEntriesParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetEntriesCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntriesCount'
type MockQuerierer_GetEntriesCount_Call struct {
	*mock.Call
}

// GetEntriesCount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetEntriesParams
func (_e *MockQuerierer_Expecter) GetEntriesCount(ctx interface{}, arg interface{}) *MockQuerierer_GetEntriesCount_Call {
	return &MockQuerierer_GetEntriesCount_Call{Call: _e.mock.On("GetEntriesCount", ctx, arg)}
}

func (_c *MockQuerierer_GetEntriesCount_Call) Run(run func(ctx context.Context, arg database.GetEntriesParams)) *MockQuerierer_GetEntriesCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetEntriesParams))
	})
	return _c
}

func (_c *MockQuerierer_GetEntriesCount_Call) Return(_a0 int64, _a1 error) *MockQuerierer_GetEntriesCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetEntriesCount_Call) RunAndReturn(run func(context.Context, database.GetEntriesParams) (int64, error)) *MockQuerierer_GetEntriesCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFavoriteLeaderboards provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetFavoriteLeaderboards(ctx context.Context, arg database.GetFavoriteLeaderboardsParams) ([]database.GetFavoriteLeaderboardsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetFavoriteLeaderboards")
	}

	var r0 []database.GetFavoriteLeaderboardsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFavoriteLeaderboardsParams) ([]database.GetFavoriteLeaderboardsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFavoriteLeaderboardsParams) []database.GetFavoriteLeaderboardsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetFavoriteLeaderboardsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetFavoriteLeaderboardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetFavoriteLeaderboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFavoriteLeaderboards'
type MockQuerierer_GetFavoriteLeaderboards_Call struct {
	*mock.Call
}

// GetFavoriteLeaderboards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetFavoriteLeaderboardsParams
func (_e *MockQuerierer_Expecter) GetFavoriteLeaderboards(ctx interface{}, arg interface{}) *MockQuerierer_GetFavoriteLeaderboards_Call {
	return &MockQuerierer_GetFavoriteLeaderboards_Call{Call: _e.mock.On("GetFavoriteLeaderboards", ctx, arg)}
}

func (_c *MockQuerierer_GetFavoriteLeaderboards_Call) Run(run func(ctx context.Context, arg database.GetFavoriteLeaderboardsParams)) *MockQuerierer_GetFavoriteLeaderboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetFavoriteLeaderboardsParams))
	})
	return _c
}

func (_c *MockQuerierer_GetFavoriteLeaderboards_Call) Return(_a0 []database.GetFavoriteLeaderboardsRow, _a1 error) *MockQuerierer_GetFavoriteLeaderboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetFavoriteLeaderboards_Call) RunAndReturn(run func(context.Context, database.GetFavoriteLeaderboardsParams) ([]database.GetFavoriteLeaderboardsRow, error)) *MockQuerierer_GetFavoriteLeaderboards_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldByLID provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetFieldByLID(ctx context.Context, arg database.GetFieldByLIDParams) (database.LeaderboardField, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldByLID")
	}

	var r0 database.LeaderboardField
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFieldByLIDParams) (database.LeaderboardField, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFieldByLIDParams) database.LeaderboardField); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.LeaderboardField)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetFieldByLIDParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetFieldByLID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldByLID'
type MockQuerierer_GetFieldByLID_Call struct {
	*mock.Call
}

// GetFieldByLID is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetFieldByLIDParams
func (_e *MockQuerierer_Expecter) GetFieldByLID(ctx interface{}, arg interface{}) *MockQuerierer_GetFieldByLID_Call {
	return &MockQuerierer_GetFieldByLID_Call{Call: _e.mock.On("GetFieldByLID", ctx, arg)}
}

func (_c *MockQuerierer_GetFieldByLID_Call) Run(run func(ctx context.Context, arg database.GetFieldByLIDParams)) *MockQuerierer_GetFieldByLID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetFieldByLIDParams))
	})
	return _c
}

func (_c *MockQuerierer_GetFieldByLID_Call) Return(_a0 database.LeaderboardField, _a1 error) *MockQuerierer_GetFieldByLID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetFieldByLID_Call) RunAndReturn(run func(context.Context, database.GetFieldByLIDParams) (database.LeaderboardField, error)) *MockQuerierer_GetFieldByLID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldOptions provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetFieldOptions(ctx context.Context, arg database.GetFieldOptionsParams) ([]string, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldOptions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFieldOptionsParams) ([]string, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetFieldOptionsParams) []string); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetFieldOptionsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetFieldOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldOptions'
type MockQuerierer_GetFieldOptions_Call struct {
	*mock.Call
}

// GetFieldOptions is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetFieldOptionsParams
func (_e *MockQuerierer_Expecter) GetFieldOptions(ctx interface{}, arg interface{}) *MockQuerierer_GetFieldOptions_Call {
	return &MockQuerierer_GetFieldOptions_Call{Call: _e.mock.On("GetFieldOptions", ctx, arg)}
}

func (_c *MockQuerierer_GetFieldOptions_Call) Run(run func(ctx context.Context, arg database.GetFieldOptionsParams)) *MockQuerierer_GetFieldOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetFieldOptionsParams))
	})
	return _c
}

func (_c *MockQuerierer_GetFieldOptions_Call) Return(_a0 []string, _a1 error) *MockQuerierer_GetFieldOptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetFieldOptions_Call) RunAndReturn(run func(context.Context, database.GetFieldOptionsParams) ([]string, error)) *MockQuerierer_GetFieldOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderboardById provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetLeaderboardById(ctx context.Context, id int32) (database.GetLeaderboardByIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboardById")
	}

	var r0 database.GetLeaderboardByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (database.GetLeaderboardByIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) database.GetLeaderboardByIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.GetLeaderboardByIdRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetLeaderboardById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboardById'
type MockQuerierer_GetLeaderboardById_Call struct {
	*mock.Call
}

// GetLeaderboardById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetLeaderboardById(ctx interface{}, id interface{}) *MockQuerierer_GetLeaderboardById_Call {
	return &MockQuerierer_GetLeaderboardById_Call{Call: _e.mock.On("GetLeaderboardById", ctx, id)}
}

func (_c *MockQuerierer_GetLeaderboardById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetLeaderboardById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetLeaderboardById_Call) Return(_a0 database.GetLeaderboardByIdRow, _a1 error) *MockQuerierer_GetLeaderboardById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetLeaderboardById_Call) RunAndReturn(run func(context.Context, int32) (database.GetLeaderboardByIdRow, error)) *MockQuerierer_GetLeaderboardById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderboardEntryById provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetLeaderboardEntryById(ctx context.Context, id int32) (database.LeaderboardEntry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboardEntryById")
	}

	var r0 database.LeaderboardEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (database.LeaderboardEntry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) database.LeaderboardEntry); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.LeaderboardEntry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetLeaderboardEntryById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboardEntryById'
type MockQuerierer_GetLeaderboardEntryById_Call struct {
	*mock.Call
}

// GetLeaderboardEntryById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetLeaderboardEntryById(ctx interface{}, id interface{}) *MockQuerierer_GetLeaderboardEntryById_Call {
	return &MockQuerierer_GetLeaderboardEntryById_Call{Call: _e.mock.On("GetLeaderboardEntryById", ctx, id)}
}

func (_c *MockQuerierer_GetLeaderboardEntryById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetLeaderboardEntryById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetLeaderboardEntryById_Call) Return(_a0 database.LeaderboardEntry, _a1 error) *MockQuerierer_GetLeaderboardEntryById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetLeaderboardEntryById_Call) RunAndReturn(run func(context.Context, int32) (database.LeaderboardEntry, error)) *MockQuerierer_GetLeaderboardEntryById_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderboardFieldsByLID provides a mock function with given fields: ctx, lid
func (_m *MockQuerierer) GetLeaderboardFieldsByLID(ctx context.Context, lid int32) ([]database.LeaderboardField, error) {
	ret := _m.Called(ctx, lid)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboardFieldsByLID")
	}

	var r0 []database.LeaderboardField
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]database.LeaderboardField, error)); ok {
		return rf(ctx, lid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []database.LeaderboardField); ok {
		r0 = rf(ctx, lid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LeaderboardField)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, lid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetLeaderboardFieldsByLID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboardFieldsByLID'
type MockQuerierer_GetLeaderboardFieldsByLID_Call struct {
	*mock.Call
}

// GetLeaderboardFieldsByLID is a helper method to define mock.On call
//   - ctx context.Context
//   - lid int32
func (_e *MockQuerierer_Expecter) GetLeaderboardFieldsByLID(ctx interface{}, lid interface{}) *MockQuerierer_GetLeaderboardFieldsByLID_Call {
	return &MockQuerierer_GetLeaderboardFieldsByLID_Call{Call: _e.mock.On("GetLeaderboardFieldsByLID", ctx, lid)}
}

func (_c *MockQuerierer_GetLeaderboardFieldsByLID_Call) Run(run func(ctx context.Context, lid int32)) *MockQuerierer_GetLeaderboardFieldsByLID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetLeaderboardFieldsByLID_Call) Return(_a0 []database.LeaderboardField, _a1 error) *MockQuerierer_GetLeaderboardFieldsByLID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetLeaderboardFieldsByLID_Call) RunAndReturn(run func(context.Context, int32) ([]database.LeaderboardField, error)) *MockQuerierer_GetLeaderboardFieldsByLID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderboardFull provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetLeaderboardFull(ctx context.Context, id int32) ([]database.GetLeaderboardFullRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboardFull")
	}

	var r0 []database.GetLeaderboardFullRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]database.GetLeaderboardFullRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []database.GetLeaderboardFullRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetLeaderboardFullRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetLeaderboardFull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboardFull'
type MockQuerierer_GetLeaderboardFull_Call struct {
	*mock.Call
}

// GetLeaderboardFull is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetLeaderboardFull(ctx interface{}, id interface{}) *MockQuerierer_GetLeaderboardFull_Call {
	return &MockQuerierer_GetLeaderboardFull_Call{Call: _e.mock.On("GetLeaderboardFull", ctx, id)}
}

func (_c *MockQuerierer_GetLeaderboardFull_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetLeaderboardFull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetLeaderboardFull_Call) Return(_a0 []database.GetLeaderboardFullRow, _a1 error) *MockQuerierer_GetLeaderboardFull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetLeaderboardFull_Call) RunAndReturn(run func(context.Context, int32) ([]database.GetLeaderboardFullRow, error)) *MockQuerierer_GetLeaderboardFull_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeaderboardsByUsername provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetLeaderboardsByUsername(ctx context.Context, arg database.GetLeaderboardsByUsernameParams) ([]database.GetLeaderboardsByUsernameRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetLeaderboardsByUsername")
	}

	var r0 []database.GetLeaderboardsByUsernameRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetLeaderboardsByUsernameParams) ([]database.GetLeaderboardsByUsernameRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetLeaderboardsByUsernameParams) []database.GetLeaderboardsByUsernameRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetLeaderboardsByUsernameRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetLeaderboardsByUsernameParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetLeaderboardsByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeaderboardsByUsername'
type MockQuerierer_GetLeaderboardsByUsername_Call struct {
	*mock.Call
}

// GetLeaderboardsByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetLeaderboardsByUsernameParams
func (_e *MockQuerierer_Expecter) GetLeaderboardsByUsername(ctx interface{}, arg interface{}) *MockQuerierer_GetLeaderboardsByUsername_Call {
	return &MockQuerierer_GetLeaderboardsByUsername_Call{Call: _e.mock.On("GetLeaderboardsByUsername", ctx, arg)}
}

func (_c *MockQuerierer_GetLeaderboardsByUsername_Call) Run(run func(ctx context.Context, arg database.GetLeaderboardsByUsernameParams)) *MockQuerierer_GetLeaderboardsByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetLeaderboardsByUsernameParams))
	})
	return _c
}

func (_c *MockQuerierer_GetLeaderboardsByUsername_Call) Return(_a0 []database.GetLeaderboardsByUsernameRow, _a1 error) *MockQuerierer_GetLeaderboardsByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetLeaderboardsByUsername_Call) RunAndReturn(run func(context.Context, database.GetLeaderboardsByUsernameParams) ([]database.GetLeaderboardsByUsernameRow, error)) *MockQuerierer_GetLeaderboardsByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecentLeaderboards provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) GetRecentLeaderboards(ctx context.Context, arg database.GetRecentLeaderboardsParams) ([]database.GetRecentLeaderboardsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentLeaderboards")
	}

	var r0 []database.GetRecentLeaderboardsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.GetRecentLeaderboardsParams) ([]database.GetRecentLeaderboardsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.GetRecentLeaderboardsParams) []database.GetRecentLeaderboardsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GetRecentLeaderboardsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.GetRecentLeaderboardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetRecentLeaderboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentLeaderboards'
type MockQuerierer_GetRecentLeaderboards_Call struct {
	*mock.Call
}

// GetRecentLeaderboards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.GetRecentLeaderboardsParams
func (_e *MockQuerierer_Expecter) GetRecentLeaderboards(ctx interface{}, arg interface{}) *MockQuerierer_GetRecentLeaderboards_Call {
	return &MockQuerierer_GetRecentLeaderboards_Call{Call: _e.mock.On("GetRecentLeaderboards", ctx, arg)}
}

func (_c *MockQuerierer_GetRecentLeaderboards_Call) Run(run func(ctx context.Context, arg database.GetRecentLeaderboardsParams)) *MockQuerierer_GetRecentLeaderboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.GetRecentLeaderboardsParams))
	})
	return _c
}

func (_c *MockQuerierer_GetRecentLeaderboards_Call) Return(_a0 []database.GetRecentLeaderboardsRow, _a1 error) *MockQuerierer_GetRecentLeaderboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetRecentLeaderboards_Call) RunAndReturn(run func(context.Context, database.GetRecentLeaderboardsParams) ([]database.GetRecentLeaderboardsRow, error)) *MockQuerierer_GetRecentLeaderboards_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshToken provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetRefreshToken(ctx context.Context, id int32) (database.RefreshToken, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 database.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (database.RefreshToken, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) database.RefreshToken); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshToken'
type MockQuerierer_GetRefreshToken_Call struct {
	*mock.Call
}

// GetRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetRefreshToken(ctx interface{}, id interface{}) *MockQuerierer_GetRefreshToken_Call {
	return &MockQuerierer_GetRefreshToken_Call{Call: _e.mock.On("GetRefreshToken", ctx, id)}
}

func (_c *MockQuerierer_GetRefreshToken_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetRefreshToken_Call) Return(_a0 database.RefreshToken, _a1 error) *MockQuerierer_GetRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetRefreshToken_Call) RunAndReturn(run func(context.Context, int32) (database.RefreshToken, error)) *MockQuerierer_GetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockQuerierer) GetUserByEmail(ctx context.Context, email string) (database.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerierer_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerierer_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerierer_GetUserByEmail_Call {
	return &MockQuerierer_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerierer_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_GetUserByEmail_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetUserByID(ctx context.Context, id int32) (database.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (database.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) database.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockQuerierer_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetUserByID(ctx interface{}, id interface{}) *MockQuerierer_GetUserByID_Call {
	return &MockQuerierer_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, id)}
}

func (_c *MockQuerierer_GetUserByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetUserByID_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserByID_Call) RunAndReturn(run func(context.Context, int32) (database.User, error)) *MockQuerierer_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockQuerierer) GetUserByUsername(ctx context.Context, username string) (database.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockQuerierer_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerierer_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockQuerierer_GetUserByUsername_Call {
	return &MockQuerierer_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockQuerierer_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_GetUserByUsername_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFavorite provides a mock function with given fields: ctx, userID
func (_m *MockQuerierer) GetUserFavorite(ctx context.Context, userID int32) ([]database.LeaderboardFavourite, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFavorite")
	}

	var r0 []database.LeaderboardFavourite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]database.LeaderboardFavourite, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []database.LeaderboardFavourite); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LeaderboardFavourite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFavorite'
type MockQuerierer_GetUserFavorite_Call struct {
	*mock.Call
}

// GetUserFavorite is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *MockQuerierer_Expecter) GetUserFavorite(ctx interface{}, userID interface{}) *MockQuerierer_GetUserFavorite_Call {
	return &MockQuerierer_GetUserFavorite_Call{Call: _e.mock.On("GetUserFavorite", ctx, userID)}
}

func (_c *MockQuerierer_GetUserFavorite_Call) Run(run func(ctx context.Context, userID int32)) *MockQuerierer_GetUserFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetUserFavorite_Call) Return(_a0 []database.LeaderboardFavourite, _a1 error) *MockQuerierer_GetUserFavorite_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserFavorite_Call) RunAndReturn(run func(context.Context, int32) ([]database.LeaderboardFavourite, error)) *MockQuerierer_GetUserFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsernameFromId provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) GetUsernameFromId(ctx context.Context, id int32) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUsernameFromId")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUsernameFromId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsernameFromId'
type MockQuerierer_GetUsernameFromId_Call struct {
	*mock.Call
}

// GetUsernameFromId is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) GetUsernameFromId(ctx interface{}, id interface{}) *MockQuerierer_GetUsernameFromId_Call {
	return &MockQuerierer_GetUsernameFromId_Call{Call: _e.mock.On("GetUsernameFromId", ctx, id)}
}

func (_c *MockQuerierer_GetUsernameFromId_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_GetUsernameFromId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetUsernameFromId_Call) Return(_a0 string, _a1 error) *MockQuerierer_GetUsernameFromId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUsernameFromId_Call) RunAndReturn(run func(context.Context, int32) (string, error)) *MockQuerierer_GetUsernameFromId_Call {
	_c.Call.Return(run)
	return _c
}

// GetVerifiers provides a mock function with given fields: ctx, leaderboardID
func (_m *MockQuerierer) GetVerifiers(ctx context.Context, leaderboardID int32) ([]database.User, error) {
	ret := _m.Called(ctx, leaderboardID)

	if len(ret) == 0 {
		panic("no return value specified for GetVerifiers")
	}

	var r0 []database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]database.User, error)); ok {
		return rf(ctx, leaderboardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []database.User); ok {
		r0 = rf(ctx, leaderboardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, leaderboardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetVerifiers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVerifiers'
type MockQuerierer_GetVerifiers_Call struct {
	*mock.Call
}

// GetVerifiers is a helper method to define mock.On call
//   - ctx context.Context
//   - leaderboardID int32
func (_e *MockQuerierer_Expecter) GetVerifiers(ctx interface{}, leaderboardID interface{}) *MockQuerierer_GetVerifiers_Call {
	return &MockQuerierer_GetVerifiers_Call{Call: _e.mock.On("GetVerifiers", ctx, leaderboardID)}
}

func (_c *MockQuerierer_GetVerifiers_Call) Run(run func(ctx context.Context, leaderboardID int32)) *MockQuerierer_GetVerifiers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_GetVerifiers_Call) Return(_a0 []database.User, _a1 error) *MockQuerierer_GetVerifiers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetVerifiers_Call) RunAndReturn(run func(context.Context, int32) ([]database.User, error)) *MockQuerierer_GetVerifiers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVerifier provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) RemoveVerifier(ctx context.Context, arg database.RemoveVerifierParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVerifier")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RemoveVerifierParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_RemoveVerifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVerifier'
type MockQuerierer_RemoveVerifier_Call struct {
	*mock.Call
}

// RemoveVerifier is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RemoveVerifierParams
func (_e *MockQuerierer_Expecter) RemoveVerifier(ctx interface{}, arg interface{}) *MockQuerierer_RemoveVerifier_Call {
	return &MockQuerierer_RemoveVerifier_Call{Call: _e.mock.On("RemoveVerifier", ctx, arg)}
}

func (_c *MockQuerierer_RemoveVerifier_Call) Run(run func(ctx context.Context, arg database.RemoveVerifierParams)) *MockQuerierer_RemoveVerifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RemoveVerifierParams))
	})
	return _c
}

func (_c *MockQuerierer_RemoveVerifier_Call) Return(_a0 error) *MockQuerierer_RemoveVerifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_RemoveVerifier_Call) RunAndReturn(run func(context.Context, database.RemoveVerifierParams) error) *MockQuerierer_RemoveVerifier_Call {
	_c.Call.Return(run)
	return _c
}

// RenameFieldOnEntriesByLeaderboardId provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) RenameFieldOnEntriesByLeaderboardId(ctx context.Context, arg database.RenameFieldOnEntriesByLeaderboardIdParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RenameFieldOnEntriesByLeaderboardId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RenameFieldOnEntriesByLeaderboardIdParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameFieldOnEntriesByLeaderboardId'
type MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call struct {
	*mock.Call
}

// RenameFieldOnEntriesByLeaderboardId is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RenameFieldOnEntriesByLeaderboardIdParams
func (_e *MockQuerierer_Expecter) RenameFieldOnEntriesByLeaderboardId(ctx interface{}, arg interface{}) *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call {
	return &MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call{Call: _e.mock.On("RenameFieldOnEntriesByLeaderboardId", ctx, arg)}
}

func (_c *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call) Run(run func(ctx context.Context, arg database.RenameFieldOnEntriesByLeaderboardIdParams)) *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RenameFieldOnEntriesByLeaderboardIdParams))
	})
	return _c
}

func (_c *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call) Return(_a0 error) *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call) RunAndReturn(run func(context.Context, database.RenameFieldOnEntriesByLeaderboardIdParams) error) *MockQuerierer_RenameFieldOnEntriesByLeaderboardId_Call {
	_c.Call.Return(run)
	return _c
}

// RenameLeadeboardOption provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) RenameLeadeboardOption(ctx context.Context, arg database.RenameLeadeboardOptionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RenameLeadeboardOption")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RenameLeadeboardOptionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_RenameLeadeboardOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameLeadeboardOption'
type MockQuerierer_RenameLeadeboardOption_Call struct {
	*mock.Call
}

// RenameLeadeboardOption is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.RenameLeadeboardOptionParams
func (_e *MockQuerierer_Expecter) RenameLeadeboardOption(ctx interface{}, arg interface{}) *MockQuerierer_RenameLeadeboardOption_Call {
	return &MockQuerierer_RenameLeadeboardOption_Call{Call: _e.mock.On("RenameLeadeboardOption", ctx, arg)}
}

func (_c *MockQuerierer_RenameLeadeboardOption_Call) Run(run func(ctx context.Context, arg database.RenameLeadeboardOptionParams)) *MockQuerierer_RenameLeadeboardOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RenameLeadeboardOptionParams))
	})
	return _c
}

func (_c *MockQuerierer_RenameLeadeboardOption_Call) Return(_a0 error) *MockQuerierer_RenameLeadeboardOption_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_RenameLeadeboardOption_Call) RunAndReturn(run func(context.Context, database.RenameLeadeboardOptionParams) error) *MockQuerierer_RenameLeadeboardOption_Call {
	_c.Call.Return(run)
	return _c
}

// RevokedAllRefreshToken provides a mock function with given fields: ctx, userID
func (_m *MockQuerierer) RevokedAllRefreshToken(ctx context.Context, userID int32) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokedAllRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_RevokedAllRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokedAllRefreshToken'
type MockQuerierer_RevokedAllRefreshToken_Call struct {
	*mock.Call
}

// RevokedAllRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int32
func (_e *MockQuerierer_Expecter) RevokedAllRefreshToken(ctx interface{}, userID interface{}) *MockQuerierer_RevokedAllRefreshToken_Call {
	return &MockQuerierer_RevokedAllRefreshToken_Call{Call: _e.mock.On("RevokedAllRefreshToken", ctx, userID)}
}

func (_c *MockQuerierer_RevokedAllRefreshToken_Call) Run(run func(ctx context.Context, userID int32)) *MockQuerierer_RevokedAllRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_RevokedAllRefreshToken_Call) Return(_a0 error) *MockQuerierer_RevokedAllRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_RevokedAllRefreshToken_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_RevokedAllRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokedRefreshToken provides a mock function with given fields: ctx, id
func (_m *MockQuerierer) RevokedRefreshToken(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RevokedRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_RevokedRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokedRefreshToken'
type MockQuerierer_RevokedRefreshToken_Call struct {
	*mock.Call
}

// RevokedRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerierer_Expecter) RevokedRefreshToken(ctx interface{}, id interface{}) *MockQuerierer_RevokedRefreshToken_Call {
	return &MockQuerierer_RevokedRefreshToken_Call{Call: _e.mock.On("RevokedRefreshToken", ctx, id)}
}

func (_c *MockQuerierer_RevokedRefreshToken_Call) Run(run func(ctx context.Context, id int32)) *MockQuerierer_RevokedRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerierer_RevokedRefreshToken_Call) Return(_a0 error) *MockQuerierer_RevokedRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_RevokedRefreshToken_Call) RunAndReturn(run func(context.Context, int32) error) *MockQuerierer_RevokedRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx
func (_m *MockQuerierer) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockQuerierer_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerierer_Expecter) Rollback(ctx interface{}) *MockQuerierer_Rollback_Call {
	return &MockQuerierer_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockQuerierer_Rollback_Call) Run(run func(ctx context.Context)) *MockQuerierer_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuerierer_Rollback_Call) Return(_a0 error) *MockQuerierer_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_Rollback_Call) RunAndReturn(run func(context.Context) error) *MockQuerierer_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SearchFavoriteLeaderboards provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) SearchFavoriteLeaderboards(ctx context.Context, arg database.SearchFavoriteLeaderboardsParams) ([]database.SearchFavoriteLeaderboardsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchFavoriteLeaderboards")
	}

	var r0 []database.SearchFavoriteLeaderboardsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SearchFavoriteLeaderboardsParams) ([]database.SearchFavoriteLeaderboardsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.SearchFavoriteLeaderboardsParams) []database.SearchFavoriteLeaderboardsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SearchFavoriteLeaderboardsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.SearchFavoriteLeaderboardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_SearchFavoriteLeaderboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFavoriteLeaderboards'
type MockQuerierer_SearchFavoriteLeaderboards_Call struct {
	*mock.Call
}

// SearchFavoriteLeaderboards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.SearchFavoriteLeaderboardsParams
func (_e *MockQuerierer_Expecter) SearchFavoriteLeaderboards(ctx interface{}, arg interface{}) *MockQuerierer_SearchFavoriteLeaderboards_Call {
	return &MockQuerierer_SearchFavoriteLeaderboards_Call{Call: _e.mock.On("SearchFavoriteLeaderboards", ctx, arg)}
}

func (_c *MockQuerierer_SearchFavoriteLeaderboards_Call) Run(run func(ctx context.Context, arg database.SearchFavoriteLeaderboardsParams)) *MockQuerierer_SearchFavoriteLeaderboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SearchFavoriteLeaderboardsParams))
	})
	return _c
}

func (_c *MockQuerierer_SearchFavoriteLeaderboards_Call) Return(_a0 []database.SearchFavoriteLeaderboardsRow, _a1 error) *MockQuerierer_SearchFavoriteLeaderboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_SearchFavoriteLeaderboards_Call) RunAndReturn(run func(context.Context, database.SearchFavoriteLeaderboardsParams) ([]database.SearchFavoriteLeaderboardsRow, error)) *MockQuerierer_SearchFavoriteLeaderboards_Call {
	_c.Call.Return(run)
	return _c
}

// SearchLeaderboards provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) SearchLeaderboards(ctx context.Context, arg database.SearchLeaderboardsParams) ([]database.SearchLeaderboardsRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for SearchLeaderboards")
	}

	var r0 []database.SearchLeaderboardsRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SearchLeaderboardsParams) ([]database.SearchLeaderboardsRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.SearchLeaderboardsParams) []database.SearchLeaderboardsRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SearchLeaderboardsRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.SearchLeaderboardsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_SearchLeaderboards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchLeaderboards'
type MockQuerierer_SearchLeaderboards_Call struct {
	*mock.Call
}

// SearchLeaderboards is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.SearchLeaderboardsParams
func (_e *MockQuerierer_Expecter) SearchLeaderboards(ctx interface{}, arg interface{}) *MockQuerierer_SearchLeaderboards_Call {
	return &MockQuerierer_SearchLeaderboards_Call{Call: _e.mock.On("SearchLeaderboards", ctx, arg)}
}

func (_c *MockQuerierer_SearchLeaderboards_Call) Run(run func(ctx context.Context, arg database.SearchLeaderboardsParams)) *MockQuerierer_SearchLeaderboards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SearchLeaderboardsParams))
	})
	return _c
}

func (_c *MockQuerierer_SearchLeaderboards_Call) Return(_a0 []database.SearchLeaderboardsRow, _a1 error) *MockQuerierer_SearchLeaderboards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_SearchLeaderboards_Call) RunAndReturn(run func(context.Context, database.SearchLeaderboardsParams) ([]database.SearchLeaderboardsRow, error)) *MockQuerierer_SearchLeaderboards_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFieldsName provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateFieldsName(ctx context.Context, arg database.UpdateFieldsNameParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFieldsName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateFieldsNameParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_UpdateFieldsName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFieldsName'
type MockQuerierer_UpdateFieldsName_Call struct {
	*mock.Call
}

// UpdateFieldsName is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateFieldsNameParams
func (_e *MockQuerierer_Expecter) UpdateFieldsName(ctx interface{}, arg interface{}) *MockQuerierer_UpdateFieldsName_Call {
	return &MockQuerierer_UpdateFieldsName_Call{Call: _e.mock.On("UpdateFieldsName", ctx, arg)}
}

func (_c *MockQuerierer_UpdateFieldsName_Call) Run(run func(ctx context.Context, arg database.UpdateFieldsNameParams)) *MockQuerierer_UpdateFieldsName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateFieldsNameParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateFieldsName_Call) Return(_a0 error) *MockQuerierer_UpdateFieldsName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_UpdateFieldsName_Call) RunAndReturn(run func(context.Context, database.UpdateFieldsNameParams) error) *MockQuerierer_UpdateFieldsName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefreshToken provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateRefreshToken(ctx context.Context, arg database.UpdateRefreshTokenParams) (database.RefreshToken, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshToken")
	}

	var r0 database.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateRefreshTokenParams) (database.RefreshToken, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateRefreshTokenParams) database.RefreshToken); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateRefreshTokenParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_UpdateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefreshToken'
type MockQuerierer_UpdateRefreshToken_Call struct {
	*mock.Call
}

// UpdateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateRefreshTokenParams
func (_e *MockQuerierer_Expecter) UpdateRefreshToken(ctx interface{}, arg interface{}) *MockQuerierer_UpdateRefreshToken_Call {
	return &MockQuerierer_UpdateRefreshToken_Call{Call: _e.mock.On("UpdateRefreshToken", ctx, arg)}
}

func (_c *MockQuerierer_UpdateRefreshToken_Call) Run(run func(ctx context.Context, arg database.UpdateRefreshTokenParams)) *MockQuerierer_UpdateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateRefreshTokenParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateRefreshToken_Call) Return(_a0 database.RefreshToken, _a1 error) *MockQuerierer_UpdateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_UpdateRefreshToken_Call) RunAndReturn(run func(context.Context, database.UpdateRefreshTokenParams) (database.RefreshToken, error)) *MockQuerierer_UpdateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateUser(ctx context.Context, arg database.UpdateUserParams) (database.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateUserParams) (database.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateUserParams) database.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.UpdateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockQuerierer_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserParams
func (_e *MockQuerierer_Expecter) UpdateUser(ctx interface{}, arg interface{}) *MockQuerierer_UpdateUser_Call {
	return &MockQuerierer_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, arg)}
}

func (_c *MockQuerierer_UpdateUser_Call) Run(run func(ctx context.Context, arg database.UpdateUserParams)) *MockQuerierer_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateUserParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateUser_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_UpdateUser_Call) RunAndReturn(run func(context.Context, database.UpdateUserParams) (database.User, error)) *MockQuerierer_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateUserPassword(ctx context.Context, arg database.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockQuerierer_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserPasswordParams
func (_e *MockQuerierer_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *MockQuerierer_UpdateUserPassword_Call {
	return &MockQuerierer_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *MockQuerierer_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg database.UpdateUserPasswordParams)) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateUserPassword_Call) Return(_a0 error) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, database.UpdateUserPasswordParams) error) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEntry provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) VerifyEntry(ctx context.Context, arg database.VerifyEntryParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.VerifyEntryParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_VerifyEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEntry'
type MockQuerierer_VerifyEntry_Call struct {
	*mock.Call
}

// VerifyEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.VerifyEntryParams
func (_e *MockQuerierer_Expecter) VerifyEntry(ctx interface{}, arg interface{}) *MockQuerierer_VerifyEntry_Call {
	return &MockQuerierer_VerifyEntry_Call{Call: _e.mock.On("VerifyEntry", ctx, arg)}
}

func (_c *MockQuerierer_VerifyEntry_Call) Run(run func(ctx context.Context, arg database.VerifyEntryParams)) *MockQuerierer_VerifyEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.VerifyEntryParams))
	})
	return _c
}

func (_c *MockQuerierer_VerifyEntry_Call) Return(_a0 error) *MockQuerierer_VerifyEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_VerifyEntry_Call) RunAndReturn(run func(context.Context, database.VerifyEntryParams) error) *MockQuerierer_VerifyEntry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerierer creates a new instance of MockQuerierer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerierer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerierer {
	mock := &MockQuerierer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
