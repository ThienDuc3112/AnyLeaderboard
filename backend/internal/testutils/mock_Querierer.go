// Code generated by mockery v2.50.1. DO NOT EDIT.

package testutils

import (
	database "anylbapi/internal/database"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockQuerierer is an autogenerated mock type for the Querierer type
type MockQuerierer struct {
	mock.Mock
}

type MockQuerierer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerierer) EXPECT() *MockQuerierer_Expecter {
	return &MockQuerierer_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx, opts
func (_m *MockQuerierer) BeginTx(ctx context.Context, opts *sql.TxOptions) (database.Querierer, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 database.Querierer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) (database.Querierer, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.TxOptions) database.Querierer); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Querierer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockQuerierer_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
//   - opts *sql.TxOptions
func (_e *MockQuerierer_Expecter) BeginTx(ctx interface{}, opts interface{}) *MockQuerierer_BeginTx_Call {
	return &MockQuerierer_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx, opts)}
}

func (_c *MockQuerierer_BeginTx_Call) Run(run func(ctx context.Context, opts *sql.TxOptions)) *MockQuerierer_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sql.TxOptions))
	})
	return _c
}

func (_c *MockQuerierer_BeginTx_Call) Return(_a0 database.Querierer, _a1 error) *MockQuerierer_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_BeginTx_Call) RunAndReturn(run func(context.Context, *sql.TxOptions) (database.Querierer, error)) *MockQuerierer_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with no fields
func (_m *MockQuerierer) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockQuerierer_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockQuerierer_Expecter) Commit() *MockQuerierer_Commit_Call {
	return &MockQuerierer_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockQuerierer_Commit_Call) Run(run func()) *MockQuerierer_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQuerierer_Commit_Call) Return(_a0 error) *MockQuerierer_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_Commit_Call) RunAndReturn(run func() error) *MockQuerierer_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) CreateUser(ctx context.Context, arg database.CreateUserParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.CreateUserParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerierer_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.CreateUserParams
func (_e *MockQuerierer_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerierer_CreateUser_Call {
	return &MockQuerierer_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerierer_CreateUser_Call) Run(run func(ctx context.Context, arg database.CreateUserParams)) *MockQuerierer_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.CreateUserParams))
	})
	return _c
}

func (_c *MockQuerierer_CreateUser_Call) Return(_a0 error) *MockQuerierer_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_CreateUser_Call) RunAndReturn(run func(context.Context, database.CreateUserParams) error) *MockQuerierer_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockQuerierer) DeleteUserByUsername(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByUsername")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_DeleteUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByUsername'
type MockQuerierer_DeleteUserByUsername_Call struct {
	*mock.Call
}

// DeleteUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerierer_Expecter) DeleteUserByUsername(ctx interface{}, username interface{}) *MockQuerierer_DeleteUserByUsername_Call {
	return &MockQuerierer_DeleteUserByUsername_Call{Call: _e.mock.On("DeleteUserByUsername", ctx, username)}
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) Return(_a0 error) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_DeleteUserByUsername_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerierer_DeleteUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockQuerierer) GetUserByEmail(ctx context.Context, email string) (database.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerierer_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockQuerierer_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerierer_GetUserByEmail_Call {
	return &MockQuerierer_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerierer_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_GetUserByEmail_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockQuerierer_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockQuerierer) GetUserByUsername(ctx context.Context, username string) (database.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerierer_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockQuerierer_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockQuerierer_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockQuerierer_GetUserByUsername_Call {
	return &MockQuerierer_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockQuerierer_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerierer_GetUserByUsername_Call) Return(_a0 database.User, _a1 error) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerierer_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockQuerierer_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with no fields
func (_m *MockQuerierer) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockQuerierer_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockQuerierer_Expecter) Rollback() *MockQuerierer_Rollback_Call {
	return &MockQuerierer_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockQuerierer_Rollback_Call) Run(run func()) *MockQuerierer_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQuerierer_Rollback_Call) Return(_a0 error) *MockQuerierer_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_Rollback_Call) RunAndReturn(run func() error) *MockQuerierer_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserDescription provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateUserDescription(ctx context.Context, arg database.UpdateUserDescriptionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateUserDescriptionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_UpdateUserDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserDescription'
type MockQuerierer_UpdateUserDescription_Call struct {
	*mock.Call
}

// UpdateUserDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserDescriptionParams
func (_e *MockQuerierer_Expecter) UpdateUserDescription(ctx interface{}, arg interface{}) *MockQuerierer_UpdateUserDescription_Call {
	return &MockQuerierer_UpdateUserDescription_Call{Call: _e.mock.On("UpdateUserDescription", ctx, arg)}
}

func (_c *MockQuerierer_UpdateUserDescription_Call) Run(run func(ctx context.Context, arg database.UpdateUserDescriptionParams)) *MockQuerierer_UpdateUserDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateUserDescriptionParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateUserDescription_Call) Return(_a0 error) *MockQuerierer_UpdateUserDescription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_UpdateUserDescription_Call) RunAndReturn(run func(context.Context, database.UpdateUserDescriptionParams) error) *MockQuerierer_UpdateUserDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserPassword provides a mock function with given fields: ctx, arg
func (_m *MockQuerierer) UpdateUserPassword(ctx context.Context, arg database.UpdateUserPasswordParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.UpdateUserPasswordParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerierer_UpdateUserPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserPassword'
type MockQuerierer_UpdateUserPassword_Call struct {
	*mock.Call
}

// UpdateUserPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - arg database.UpdateUserPasswordParams
func (_e *MockQuerierer_Expecter) UpdateUserPassword(ctx interface{}, arg interface{}) *MockQuerierer_UpdateUserPassword_Call {
	return &MockQuerierer_UpdateUserPassword_Call{Call: _e.mock.On("UpdateUserPassword", ctx, arg)}
}

func (_c *MockQuerierer_UpdateUserPassword_Call) Run(run func(ctx context.Context, arg database.UpdateUserPasswordParams)) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.UpdateUserPasswordParams))
	})
	return _c
}

func (_c *MockQuerierer_UpdateUserPassword_Call) Return(_a0 error) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerierer_UpdateUserPassword_Call) RunAndReturn(run func(context.Context, database.UpdateUserPasswordParams) error) *MockQuerierer_UpdateUserPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerierer creates a new instance of MockQuerierer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerierer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerierer {
	mock := &MockQuerierer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
